"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[511],{9613:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,p=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=i(n),d=a,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||p;return n?r.createElement(g,o(o({ref:t},s),{},{components:n})):r.createElement(g,o({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var p=n.length,o=new Array(p);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var i=2;i<p;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>p,metadata:()=>l,toc:()=>i});var r=n(1163),a=(n(9496),n(9613));const p={},o="m npm clean_tags",l={unversionedId:"cli/npm/clean_tags",id:"cli/npm/clean_tags",title:"m npm clean_tags",description:"Usage",source:"@site/docs/cli/npm/clean_tags.mdx",sourceDirName:"cli/npm",slug:"/cli/npm/clean_tags",permalink:"/m/docs/cli/npm/clean_tags",draft:!1,editUrl:"https://github.com/jmlopez-rod/m/tree/master/packages/create-docusaurus/templates/shared/docs/cli/npm/clean_tags.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"m github pr",permalink:"/m/docs/cli/github/pr"},next:{title:"m ci celt",permalink:"/m/docs/cli/ci/celt"}},c={},i=[{value:"Usage",id:"usage",level:2},{value:"Procedure",id:"procedure",level:2}],s={toc:i},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"m-npm-clean_tags"},"m npm clean_tags"),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ m npm clean_tags [@scope/name]\n[]\n")),(0,a.kt)("p",null,"The command will use ",(0,a.kt)("inlineCode",{parentName:"p"},"npm")," to find all the tags that point to non-existing\nversions of an npm package and remove them. The output will be a a json\nlist of the output of the removal command provided by ",(0,a.kt)("inlineCode",{parentName:"p"},"npm"),"."),(0,a.kt)("p",null,"An output of an empty array means that no npm tags were removed."),(0,a.kt)("h2",{id:"procedure"},"Procedure"),(0,a.kt)("p",null,"Removes empty ",(0,a.kt)("inlineCode",{parentName:"p"},"npm")," tags. The implementation roughly does the following.\nIt calls npm to find out the tags of a package"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'~$ npm info @jmlopez-rod/m dist-tags --json\n{\n  "latest": "0.9.0",\n  "master": "0.0.0-master.b2539220687",\n  "next": "0.9.0-rc33.b2539239601",\n  "pr11": "0.0.0-pr11.b1166903590",\n  "pr13": "0.0.0-pr13.b1192723950",\n  "pr16": "0.0.0-pr16.b1194720134",\n  "pr18": "0.0.0-pr18.b1224379867",\n  "pr20": "0.0.0-pr20.b1232422923",\n  "pr22": "0.0.0-pr22.b1314622335",\n  "pr23": "0.0.0-pr23.b1937141978",\n  "pr24": "0.0.0-pr24.b1940124881",\n  "pr25": "0.0.0-pr25.b1940346281",\n  "pr26": "0.0.0-pr26.b1940501816",\n  "pr29": "0.0.0-pr29.b1989548181",\n  "pr3": "0.0.0-pr3.b1077117146",\n  "pr31": "0.0.0-pr31.b2524897625",\n  "pr32": "0.0.0-pr32.b2538930170",\n  "pr5": "0.0.0-pr5.b1106124757",\n  "pr6": "0.0.0-pr6.b1129695767",\n  "pr7": "0.0.0-pr7.b1130710538",\n  "pr1": "",\n  "pr9": "0.0.0-pr9.b1154924094"\n}\n')),(0,a.kt)("p",null,"In this case we removed all versions that were generated during ",(0,a.kt)("inlineCode",{parentName:"p"},"pr1")," so there\nis no version present, thus it has resulted in an empty tag."),(0,a.kt)("p",null,"Once all tags are identified we make a call on each tag to be removed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npm dist-tag rm @jmlopez-rod pr1 --json\n-pr1:\n")))}u.isMDXComponent=!0}}]);