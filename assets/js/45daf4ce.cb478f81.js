"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[511],{9613:(e,n,t)=>{t.d(n,{Zo:()=>i,kt:()=>g});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},i=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,p=e.originalType,c=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),m=s(t),d=a,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||p;return t?r.createElement(g,o(o({ref:n},i),{},{components:t})):r.createElement(g,o({ref:n},i))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var p=t.length,o=new Array(p);o[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<p;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8218:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>p,metadata:()=>l,toc:()=>s});var r=t(1163),a=(t(9496),t(9613));const p={},o="m npm clean_tags",l={unversionedId:"cli/npm/clean_tags",id:"cli/npm/clean_tags",title:"m npm clean_tags",description:"Usage",source:"@site/docs/cli/npm/clean_tags.mdx",sourceDirName:"cli/npm",slug:"/cli/npm/clean_tags",permalink:"/m/docs/cli/npm/clean_tags",draft:!1,editUrl:"https://github.com/jmlopez-rod/m/tree/master/packages/create-docusaurus/templates/shared/docs/cli/npm/clean_tags.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"m github pr",permalink:"/m/docs/cli/github/pr"}},c={},s=[{value:"Usage",id:"usage",level:2},{value:"Procedure",id:"procedure",level:2}],i={toc:s},m="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"m-npm-clean_tags"},"m npm clean_tags"),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ m npm clean_tags [@scope/name]\n[]\n")),(0,a.kt)("p",null,"The command will use ",(0,a.kt)("inlineCode",{parentName:"p"},"npm")," to find all the tags that point to non-existing\nversions of an npm package and remove them. The output will be a a json\nlist of the output of the removal command provided by ",(0,a.kt)("inlineCode",{parentName:"p"},"npm"),"."),(0,a.kt)("p",null,"An output of an empty array means that no npm tags were removed."),(0,a.kt)("h2",{id:"procedure"},"Procedure"),(0,a.kt)("p",null,"Removes empty ",(0,a.kt)("inlineCode",{parentName:"p"},"npm")," tags. The implementation roughly does the following.\nIt calls npm to find out the tags of a package"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'~$ npm info @jmlopez-rod/m dist-tags --json\n{\n  "latest": "0.9.0",\n  "master": "0.0.0-master.b2539220687",\n  "next": "0.9.0-rc33.b2539239601",\n  "pr11": "0.0.0-pr11.b1166903590",\n  "pr13": "0.0.0-pr13.b1192723950",\n  "pr16": "0.0.0-pr16.b1194720134",\n  "pr18": "0.0.0-pr18.b1224379867",\n  "pr20": "0.0.0-pr20.b1232422923",\n  "pr22": "0.0.0-pr22.b1314622335",\n  "pr23": "0.0.0-pr23.b1937141978",\n  "pr24": "0.0.0-pr24.b1940124881",\n  "pr25": "0.0.0-pr25.b1940346281",\n  "pr26": "0.0.0-pr26.b1940501816",\n  "pr29": "0.0.0-pr29.b1989548181",\n  "pr3": "0.0.0-pr3.b1077117146",\n  "pr31": "0.0.0-pr31.b2524897625",\n  "pr32": "0.0.0-pr32.b2538930170",\n  "pr5": "0.0.0-pr5.b1106124757",\n  "pr6": "0.0.0-pr6.b1129695767",\n  "pr7": "0.0.0-pr7.b1130710538",\n  "pr1": "",\n  "pr9": "0.0.0-pr9.b1154924094"\n}\n')),(0,a.kt)("p",null,"In this case we removed all versions that were generated during ",(0,a.kt)("inlineCode",{parentName:"p"},"pr1")," so there\nis no version present, thus it has resulted in an empty tag."),(0,a.kt)("p",null,"Once all tags are identified we make a call on each tag to be removed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npm dist-tag rm @jmlopez-rod pr1 --json\n-pr1:\n")))}u.isMDXComponent=!0}}]);