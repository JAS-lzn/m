"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[405],{9613:(e,t,l)=>{l.d(t,{Zo:()=>p,kt:()=>f});var n=l(9496);function i(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function o(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function a(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?o(Object(l),!0).forEach((function(t){i(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):o(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function r(e,t){if(null==e)return{};var l,n,i=function(e,t){if(null==e)return{};var l,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)l=o[n],t.indexOf(l)>=0||(i[l]=e[l]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)l=o[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(i[l]=e[l])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),l=t;return e&&(l="function"==typeof e?e(t):a(a({},t),e)),l},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var l=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=c(l),m=i,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return l?n.createElement(f,a(a({ref:t},p),{},{components:l})):n.createElement(f,a({ref:t},p))}));function f(e,t){var l=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=l.length,a=new Array(o);a[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:i,a[1]=r;for(var c=2;c<o;c++)a[c]=l[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,l)}m.displayName="MDXCreateElement"},357:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var n=l(1163),i=(l(9496),l(9613));const o={sidebar_position:10,sidebar_label:"m ci celt"},a="m ci celt",r={unversionedId:"cli/ci/celt",id:"cli/ci/celt",title:"m ci celt",description:"Process a compiler or linter's output to determine if a process should stop.",source:"@site/docs/cli/ci/celt.mdx",sourceDirName:"cli/ci",slug:"/cli/ci/celt",permalink:"/m/docs/cli/ci/celt",draft:!1,editUrl:"https://github.com/jmlopez-rod/m/tree/master/packages/create-docusaurus/templates/shared/docs/cli/ci/celt.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,sidebar_label:"m ci celt"},sidebar:"docsSidebar",previous:{title:"m npm clean_tags",permalink:"/m/docs/cli/npm/clean_tags"}},s={},c=[{value:"Tools",id:"tools",level:2},{value:"eslint",id:"eslint",level:3},{value:"pycodestyle",id:"pycodestyle",level:3},{value:"flake8",id:"flake8",level:3},{value:"pylint",id:"pylint",level:3},{value:"typescript",id:"typescript",level:3},{value:"Usage",id:"usage",level:2},{value:"Positional arguments",id:"positional-arguments",level:2},{value:"payload",id:"payload",level:3},{value:"Options",id:"options",level:2},{value:"-t, --tool &lt;TOOL&gt;",id:"-t---tool-tool",level:3},{value:"-c, --config &lt;CONFIG&gt;",id:"-c---config-config",level:3},{value:"-m, --max-lines &lt;MAX_LINES&gt;",id:"-m---max-lines-max_lines",level:3},{value:"-r, --file-regex &lt;FILE_REGEX&gt;",id:"-r---file-regex-file_regex",level:3},{value:"-i, --ignore-error-allowance",id:"-i---ignore-error-allowance",level:3},{value:"-s, --stats-only",id:"-s---stats-only",level:3},{value:"-f, --full-message",id:"-f---full-message",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...l}=e;return(0,i.kt)(u,(0,n.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"m-ci-celt"},"m ci celt"),(0,i.kt)("p",null,"Process a compiler or linter's output to determine if a process should stop."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'~$ m ci celt -t eslint -c @config.json < <(eslint [dir] -f json)\n\n~$ eslint [...options] > tmp.json\n~$ m ci celt -t eslint @tmp.json -c \'{"allowedEslintRules":{"semi":1}}\'\n')),(0,i.kt)("p",null,"Depending on the tool that is chosen the configuration should have an\nentry of the form ",(0,i.kt)("inlineCode",{parentName:"p"},'"allowed[ToolName]Rules"')," or ",(0,i.kt)("inlineCode",{parentName:"p"},'"ignored[ToolName]Rules"'),".\nOnly the first letter of the tool should be capitalized to conform to\nthe camel case style."),(0,i.kt)("p",null,"The entry should define a map of rule ids to the number of allowed\nviolations. In the case of ",(0,i.kt)("inlineCode",{parentName:"p"},"ignored[ToolName]Rules")," we may define\nthe rule id and assign an explanation as to why its being ignored."),(0,i.kt)("p",null,"In the examples above we use ",(0,i.kt)("inlineCode",{parentName:"p"},"@config.json"),". This means it\nwill read the file ",(0,i.kt)("inlineCode",{parentName:"p"},"config.json"),". You can use any file that you want.\nOne option is to use ",(0,i.kt)("inlineCode",{parentName:"p"},"eslintrc.json")," or create a brand new file called\n",(0,i.kt)("inlineCode",{parentName:"p"},"allowed_errors.json"),"."),(0,i.kt)("h2",{id:"tools"},"Tools"),(0,i.kt)("p",null,"Each tool may provide have different outputs"),(0,i.kt)("h3",{id:"eslint"},"eslint"),(0,i.kt)("p",null,"Should be called with the ",(0,i.kt)("inlineCode",{parentName:"p"},"-f json")," option."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"m ci celt -t eslint -c @config.json < <(eslint -f json [dir])\n")),(0,i.kt)("h3",{id:"pycodestyle"},"pycodestyle"),(0,i.kt)("p",null,"Should be called with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--format=default")," option."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"m ci celt -t pycodestyle -c @config.json < <(pycodestyle --format=default [dir])\n")),(0,i.kt)("h3",{id:"flake8"},"flake8"),(0,i.kt)("p",null,"Expects default output."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"m ci celt -t flake8 -c @config.json < <(flake8 [dir])\n")),(0,i.kt)("h3",{id:"pylint"},"pylint"),(0,i.kt)("p",null,"Should be called with the ",(0,i.kt)("inlineCode",{parentName:"p"},"-f json")," option."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"m ci celt -t pylint -c @config.json < <(pylint -f json --rcfile=[file] [dir])\n")),(0,i.kt)("h3",{id:"typescript"},"typescript"),(0,i.kt)("p",null,"Should be called with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--pretty false")," option."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"m ci celt -t typescript -c @config.json < <(tsc --pretty false)\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"m ci celt [-h] -t TOOL [-c CONFIG] [-m MAX_LINES] [-r FILE_REGEX] [-p FILE_PREFIX] [-i] [-s] [-f] [--traceback] [payload]\n")),(0,i.kt)("h2",{id:"positional-arguments"},"Positional arguments"),(0,i.kt)("h3",{id:"payload"},"payload"),(0,i.kt)("p",null,"The output of a compiler or linter. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"@-")," to read from stdin.\nA file may be specified by prefixing a filename with ",(0,i.kt)("inlineCode",{parentName:"p"},"@"),"."),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("h3",{id:"-t---tool-tool"},"-t, --tool ","<","TOOL>"),(0,i.kt)("p",null,"Name of a supported compiler/linter."),(0,i.kt)("h3",{id:"-c---config-config"},"-c, --config ","<","CONFIG>"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"{}"),".")),(0,i.kt)("p",null,"Configuration data: ",(0,i.kt)("inlineCode",{parentName:"p"},"@filename")," (file) or string."),(0,i.kt)("h3",{id:"-m---max-lines-max_lines"},"-m, --max-lines ","<","MAX_LINES>"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Default: 5.")),(0,i.kt)("p",null,"Maximum number of error lines to print, use -1 for all"),(0,i.kt)("h3",{id:"-r---file-regex-file_regex"},"-r, --file-regex ","<","FILE_REGEX>"),(0,i.kt)("p",null,"Regex expression to filter files"),(0,i.kt)("h3",{id:"-i---ignore-error-allowance"},"-i, --ignore-error-allowance"),(0,i.kt)("p",null,"Set every error allowance to 0."),(0,i.kt)("h3",{id:"-s---stats-only"},"-s, --stats-only"),(0,i.kt)("p",null,"Display a json output with current total violations."),(0,i.kt)("h3",{id:"-f---full-message"},"-f, --full-message"),(0,i.kt)("p",null,"Display the full error message."))}d.isMDXComponent=!0}}]);