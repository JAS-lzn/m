"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[511],{9613:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,f=m["".concat(i,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(f,p(p({ref:n},s),{},{components:t})):r.createElement(f,p({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,p[1]=l;for(var c=2;c<o;c++)p[c]=t[c];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},103:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=t(2848),a=t(9213),o=(t(9496),t(9613)),p=["components"],l={},i="clean_tags",c={unversionedId:"cli/npm/clean_tags",id:"cli/npm/clean_tags",title:"clean_tags",description:"Usage",source:"@site/docs/cli/npm/clean_tags.mdx",sourceDirName:"cli/npm",slug:"/cli/npm/clean_tags",permalink:"/m/docs/cli/npm/clean_tags",editUrl:"https://github.com/jmlopez-rod/m/tree/master/packages/create-docusaurus/templates/shared/docs/cli/npm/clean_tags.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"m",permalink:"/m/docs/intro"}},s={},u=[{value:"Usage",id:"usage",level:2},{value:"Procedure",id:"procedure",level:2}],m={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,p);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"clean_tags"},(0,o.kt)("inlineCode",{parentName:"h1"},"clean_tags")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ m npm clean_tags [@scope/name]\n[]\n")),(0,o.kt)("p",null,"The command will use ",(0,o.kt)("inlineCode",{parentName:"p"},"npm")," to find all the tags that point to non-existing\nversions of an npm package and remove them. The output will be a a json\nlist of the output of the removal command provided by ",(0,o.kt)("inlineCode",{parentName:"p"},"npm"),"."),(0,o.kt)("p",null,"An output of an empty array means that no npm tags were removed."),(0,o.kt)("h2",{id:"procedure"},"Procedure"),(0,o.kt)("p",null,"Removes empty ",(0,o.kt)("inlineCode",{parentName:"p"},"npm")," tags. The implementation roughly does the following.\nIt calls npm to find out the tags of a package"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'~$ npm info @jmlopez-rod/m dist-tags --json\n{\n  "latest": "0.9.0",\n  "master": "0.0.0-master.b2539220687",\n  "next": "0.9.0-rc33.b2539239601",\n  "pr11": "0.0.0-pr11.b1166903590",\n  "pr13": "0.0.0-pr13.b1192723950",\n  "pr16": "0.0.0-pr16.b1194720134",\n  "pr18": "0.0.0-pr18.b1224379867",\n  "pr20": "0.0.0-pr20.b1232422923",\n  "pr22": "0.0.0-pr22.b1314622335",\n  "pr23": "0.0.0-pr23.b1937141978",\n  "pr24": "0.0.0-pr24.b1940124881",\n  "pr25": "0.0.0-pr25.b1940346281",\n  "pr26": "0.0.0-pr26.b1940501816",\n  "pr29": "0.0.0-pr29.b1989548181",\n  "pr3": "0.0.0-pr3.b1077117146",\n  "pr31": "0.0.0-pr31.b2524897625",\n  "pr32": "0.0.0-pr32.b2538930170",\n  "pr5": "0.0.0-pr5.b1106124757",\n  "pr6": "0.0.0-pr6.b1129695767",\n  "pr7": "0.0.0-pr7.b1130710538",\n  "pr1": "",\n  "pr9": "0.0.0-pr9.b1154924094"\n}\n')),(0,o.kt)("p",null,"In this case we removed all versions that were generated during ",(0,o.kt)("inlineCode",{parentName:"p"},"pr1")," so there\nis no version present, thus it has resulted in an empty tag."),(0,o.kt)("p",null,"Once all tags are identified we make a call on each tag to be removed"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm dist-tag rm @jmlopez-rod pr1 --json\n-pr1:\n")))}d.isMDXComponent=!0}}]);